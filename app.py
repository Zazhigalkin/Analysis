import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import io
import numpy as np

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–æ–≤ –ø—Ä–æ–¥–∞–∂", page_icon="üìà", layout="wide")

st.title("üìà –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º —Å —É—á—ë—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    **–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:**
    - `flt_date&num` - –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ (—Ñ–æ—Ä–º–∞—Ç: "2024.01.15 - SU123 - MOSCOW-SOCHI")
    - `Ind SS` - –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤
    - `Ind SS yesterday` - –ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞
    - `Cap` - –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª—ë—Ç–∞
    
    **–°—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤:**
    - üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞ - –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω
    - üü¢ –ü–æ –ø–ª–∞–Ω—É - –ø—Ä–æ–¥–∞–∂–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
    - üî¥ –û—Ç—Å—Ç–∞—ë–º - –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    - ‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ - —Ä–µ–π—Å —á–µ—Ä–µ–∑ >30 –¥–Ω–µ–π —Å –º–∞–ª—ã–º –¥–Ω–µ–≤–Ω—ã–º –ø–ª–∞–Ω–æ–º
    """)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, engine="openpyxl")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if df.empty:
            st.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
            st.stop()
            
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        df = df.rename(columns={
            'flt_date&num': 'flight',
            'Ind SS': 'sold_total',
            'Ind SS yesterday': 'sold_yesterday',
            'Cap': 'total_seats'
        })

        required_columns = ['flight','sold_total','sold_yesterday','total_seats']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            st.write("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            st.stop()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ flight –Ω–∞ –¥–∞—Ç—É, –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏ –º–∞—Ä—à—Ä—É—Ç
        flight_split = df['flight'].str.split(" - ", expand=True)
        
        if flight_split.shape[1] < 3:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–æ–Ω–∫–∏ 'flight'. –û–∂–∏–¥–∞–µ—Ç—Å—è: '–î–∞—Ç–∞ - –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ - –ú–∞—Ä—à—Ä—É—Ç'")
            st.stop()
            
        df[['flight_date','flight_number','route']] = flight_split.iloc[:, :3]
        df['flight_date'] = pd.to_datetime(df['flight_date'], format="%Y.%m.%d", errors='coerce')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç
        invalid_dates = df['flight_date'].isna().sum()
        if invalid_dates > 0:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid_dates} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.")
            df = df[df['flight_date'].notna()]

        # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        today = datetime.today().date()

        # –î–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞ (–º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å)
        df['days_to_flight'] = (df['flight_date'].dt.date - today).dt.days
        df['days_to_flight'] = df['days_to_flight'].clip(lower=1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ª–µ—Ç–µ–ª–∏
        past_flights = df[df['days_to_flight'] == 0]
        if not past_flights.empty:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(past_flights)} —Ä–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ª–µ—Ç–µ–ª–∏. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['days_to_flight'] > 0]

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        df['remaining_seats'] = df['total_seats'] - df['sold_total']
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        df['daily_needed'] = np.where(
            df['days_to_flight'] > 0,
            df['remaining_seats'] / df['days_to_flight'],
            0
        )
        
        df['diff_vs_plan'] = df['sold_yesterday'] - df['daily_needed']

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        def classify(row):
            days_to_flight = row['days_to_flight']
            daily_needed = row['daily_needed']
            diff = row['diff_vs_plan']
            
            # –†–µ–π—Å—ã –≤ –ø—Ä–æ—à–ª–æ–º
            if days_to_flight <= 0:
                return "‚ö´ –í—ã–ª–µ—Ç–µ–ª"
            # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã —Å –º–∞–ª—ã–º —Å–ø—Ä–æ—Å–æ–º
            elif days_to_flight > 30 and daily_needed < 4:
                return "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ"
            # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            elif diff > max(5, daily_needed * 0.3):  # 5 –∏–ª–∏ 30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            # –ù–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞
            elif abs(diff) <= max(5, daily_needed * 0.3):
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            else:
                return "üî¥ –û—Ç—Å—Ç–∞—ë–º"

        df['status'] = df.apply(classify, axis=1)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
        result_columns = [
            'flight', 'flight_date', 'flight_number', 'route', 
            'total_seats', 'sold_total', 'sold_yesterday', 
            'remaining_seats', 'days_to_flight', 'daily_needed', 
            'diff_vs_plan', 'status'
        ]
        
        result = df[result_columns].round({'daily_needed': 2, 'diff_vs_plan': 2})

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂")
            
        with col2:
            status_counts = result['status'].value_counts()
            st.metric("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", len(result))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cols = st.columns(5)
        status_colors = {
            "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞": "#1f77b4",
            "üü¢ –ü–æ –ø–ª–∞–Ω—É": "#2ca02c", 
            "üî¥ –û—Ç—Å—Ç–∞—ë–º": "#d62728",
            "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ": "#7f7f7f",
            "‚ö´ –í—ã–ª–µ—Ç–µ–ª": "#000000"
        }
        
        for i, (status, count) in enumerate(status_counts.items()):
            color = status_colors.get(status, "#7f7f7f")
            cols[i].markdown(
                f"<div style='background-color:{color}; padding:10px; border-radius:5px; color:white;'>"
                f"<b>{status}</b><br>{count} —Ä–µ–π—Å–æ–≤</div>", 
                unsafe_allow_html=True
            )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            selected_status = st.multiselect(
                "–°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–æ–≤",
                options=result['status'].unique(),
                default=result['status'].unique()
            )
        
        with col2:
            min_days = int(result['days_to_flight'].min())
            max_days = int(result['days_to_flight'].max())
            days_range = st.slider(
                "–î–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞",
                min_days, max_days, (min_days, max_days)
            )
            
        with col3:
            routes = st.multiselect(
                "–ú–∞—Ä—à—Ä—É—Ç—ã",
                options=result['route'].unique(),
                default=result['route'].unique()
            )

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_result = result[
            (result['status'].isin(selected_status)) &
            (result['days_to_flight'].between(days_range[0], days_range[1])) &
            (result['route'].isin(routes))
        ]

        st.dataframe(
            filtered_result.style.apply(
                lambda x: ['background-color: #ffcccc' if x['status'] == 'üî¥ –û—Ç—Å—Ç–∞—ë–º' else '' 
                          for _ in x], 
                axis=1
            ),
            use_container_width=True
        )

        # –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
        attention_df = filtered_result[filtered_result['status'].isin(["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"])]
        if not attention_df.empty:
            st.subheader("‚ö†Ô∏è –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            
            for status in ["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"]:
                status_df = attention_df[attention_df['status'] == status]
                if not status_df.empty:
                    st.write(f"**{status}** ({len(status_df)} —Ä–µ–π—Å–æ–≤)")
                    st.dataframe(
                        status_df[['flight','flight_date','route','sold_yesterday','daily_needed','diff_vs_plan']],
                        use_container_width=True
                    )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        with st.expander("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø", f"{filtered_result['daily_needed'].mean():.1f}")
                st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞", f"{filtered_result['diff_vs_plan'].median():.1f}")
                
            with col2:
                st.metric("–†–µ–π—Å–æ–≤ –æ—Ç—Å—Ç–∞—ë—Ç –æ—Ç –ø–ª–∞–Ω–∞", 
                         len(filtered_result[filtered_result['status'] == 'üî¥ –û—Ç—Å—Ç–∞—ë–º']))
                st.metric("–†–µ–π—Å–æ–≤ —Å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–µ–π", 
                         len(filtered_result[filtered_result['status'] == 'üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞']))

        # –°–∫–∞—á–∞—Ç—å Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            result.to_excel(writer, index=False, sheet_name='Sales_Speed')
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            summary = pd.DataFrame({
                '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤', '–û—Ç—Å—Ç–∞—é—Ç', '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞', '–ü–æ –ø–ª–∞–Ω—É', '–î–∞–ª—ë–∫–∏–µ —Ä–µ–π—Å—ã'],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    len(result),
                    len(result[result['status'] == 'üî¥ –û—Ç—Å—Ç–∞—ë–º']),
                    len(result[result['status'] == 'üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞']),
                    len(result[result['status'] == 'üü¢ –ü–æ –ø–ª–∞–Ω—É']),
                    len(result[result['status'] == '‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ'])
                ]
            })
            summary.to_excel(writer, index=False, sheet_name='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
            
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Excel",
            data=output.getvalue(),
            file_name=f"sales_speed_analysis_{today.strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
