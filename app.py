import streamlit as st
import pandas as pd
from datetime import datetime
import io
import numpy as np

# ----------------------- PAGE CONFIG -----------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–æ–≤ –ø—Ä–æ–¥–∞–∂", page_icon="üìà", layout="wide")
st.title("üìà –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º —Å —É—á—ë—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")

# ----------------------- HELPERS ---------------------------
def clean_number(s: pd.Series) -> pd.Series:
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–∞: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É."""
    return pd.to_numeric(
        s.astype(str)
         .str.replace('\u00a0','', regex=False)
         .str.replace(' ','', regex=False)
         .str.replace(',','.', regex=False),
        errors='coerce'
    )

def clean_percent(s: pd.Series) -> pd.Series:
    """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã: —Å–Ω–∏–º–∞–µ—Ç %, —á–∏—Å—Ç–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏."""
    return pd.to_numeric(
        s.astype(str)
         .str.replace('%','', regex=False)
         .str.replace('\u00a0','', regex=False)
         .str.replace(' ','', regex=False)
         .str.replace(',','.', regex=False),
        errors='coerce'
    )

# ----------------------- UI: INSTRUCTIONS ------------------
with st.expander("‚ÑπÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ò –õ–û–ì–ò–ö–ï –ê–ù–ê–õ–ò–ó–ê"):
    st.markdown("""
    ### üìã –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
    - `flt_date&num` ‚Äî –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ (–Ω–∞–ø—Ä. `2024.01.15 - SU123 - MOSCOW-SOCHI`)
    - `Ind SS` ‚Äî –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ç—á—ë—Ç–µ; –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –±–ª–æ–∫–æ–≤)
    - `Ind SS yesterday` ‚Äî –ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞
    - `Cap` ‚Äî –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª—ë—Ç–∞
    - `LF` ‚Äî Load Factor
    - `Av seats` ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞

    ### üéØ –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í:
    1) **üü¢ –ü–æ –ø–ª–∞–Ω—É** ‚Äî –µ—Å–ª–∏ `daily_needed < 3`, –∏–ª–∏ `sold_yesterday = 0` –∏ `LF > 90%`, –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5 –±–∏–ª–µ—Ç–æ–≤ –ª–∏–±–æ ¬±30% –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞  
    2) **‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ** ‚Äî `days_to_flight > 30` –∏ `daily_needed < 4` –∏ `sold_yesterday <= daily_needed`  
    3) **üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞** ‚Äî —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ( > max(5, 30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞) ) –∏–ª–∏ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –∏–∑ –ø.2, –Ω–æ `sold_yesterday > daily_needed`  
    4) **üî¥ –û—Ç—Å—Ç–∞—ë–º** ‚Äî —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞

    ### üìä –†–ê–°–ß–Å–¢:
    - **days_to_flight** = –¥–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞ (–º–∏–Ω 1)
    - **sold_total (–ø–µ—Ä–µ—Å—á–∏—Ç.)** = `Cap - Av seats`  ‚Üê –≤–∫–ª—é—á–∞–µ—Ç –∂—ë—Å—Ç–∫–∏–µ –±–ª–æ–∫–∏
    - **remaining_seats** = `Av seats`
    - **daily_needed** = `remaining_seats / days_to_flight`
    - **diff_vs_plan** = `sold_yesterday - daily_needed`
    """)

with st.expander("üìÅ –§–û–†–ú–ê–¢ –ó–ê–ì–†–£–ñ–ê–ï–ú–û–ì–û EXCEL-–§–ê–ô–õ–ê"):
    st.markdown("""
    | –ö–æ–ª–æ–Ω–∫–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–º–µ—Ä |
    |---|---|---|
    | `flt_date&num` | –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ | `2024.01.15 - SU123 - MOSCOW-SOCHI` |
    | `LF` | Load Factor | `98,7%` |
    | `Av fare` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ | `4 039` |
    | `Cap` | –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å | `227` |
    | `Av seats` | –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ | `3` |
    | `Ind SS` | –ü—Ä–æ–¥–∞–Ω–æ (–±–µ–∑ –±–ª–æ–∫–æ–≤) | `214` |
    | `Ind SS today` | –ü—Ä–æ–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è | `0` |
    | `Ind SS yesterday` | –ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞ | `4` |
    """)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, engine="openpyxl")
        if df.empty:
            st.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
            st.stop()

        # ---------- Rename ----------
        df = df.rename(columns={
            'flt_date&num': 'flight',
            'Ind SS': 'sold_total_raw',          # –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (–±–µ–∑ –±–ª–æ–∫–æ–≤)
            'Ind SS yesterday': 'sold_yesterday',
            'Cap': 'total_seats',
            'LF': 'load_factor',
        })

        required_columns = ['flight','sold_total_raw','sold_yesterday','total_seats','load_factor','Av seats']
        missing_columns = [c for c in required_columns if c not in df.columns]
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            st.write("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            st.stop()

        st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())

        # ---------- Split flight ----------
        flight_split = df['flight'].str.split(" - ", n=2, expand=True)
        if flight_split.shape[1] < 3:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'flt_date&num'. –û–∂–∏–¥–∞–µ—Ç—Å—è: 'YYYY.MM.DD - XX123 - ROUTE'")
            st.stop()
        df[['flight_date_str','flight_number','route']] = flight_split.iloc[:, :3]

        # ---------- Dates ----------
        original_count = len(df)
        df['flight_date'] = pd.to_datetime(df['flight_date_str'], format="%Y.%m.%d", errors='coerce')
        invalid_dates = df['flight_date'].isna().sum()
        if invalid_dates > 0:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid_dates} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['flight_date'].notna()].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            st.stop()
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∏–∑ {original_count} –∑–∞–ø–∏—Å–µ–π")

        # ---------- Clean numbers (vectorized) ----------
        df['total_seats']     = clean_number(df['total_seats'])
        df['sold_total_raw']  = clean_number(df['sold_total_raw']).fillna(0)
        df['sold_yesterday']  = clean_number(df['sold_yesterday']).fillna(0)
        df['av_seats']        = clean_number(df['Av seats'])  # –æ—Å—Ç–∞–≤–ª—è–µ–º NaN –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        df['load_factor_num'] = clean_percent(df['load_factor']).fillna(0)

        # ---------- Require Av seats ----------
        if df['av_seats'].isna().any():
            missing = int(df['av_seats'].isna().sum())
            st.warning(f"‚ö†Ô∏è –£ {missing} —Å—Ç—Ä–æ–∫ –Ω–µ—Ç 'Av seats' ‚Äî –æ–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã (–Ω—É–∂–Ω–æ –¥–ª—è —É—á—ë—Ç–∞ –±–ª–æ–∫–æ–≤).")
            df = df[df['av_seats'].notna()].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –±–µ–∑ 'Av seats' –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö")
            st.stop()

        # ---------- Analysis date ----------
        today = datetime.today().date()

        df['days_to_flight'] = df['flight_date'].apply(lambda x: max((x.date() - today).days, 1))
        past_flights = df[df['flight_date'].dt.date < today]
        if not past_flights.empty:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(past_flights)} —Ä–µ–π—Å–æ–≤, —É–∂–µ –≤—ã–ª–µ—Ç–µ–≤—à–∏—Ö ‚Äî –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['flight_date'].dt.date >= today].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ª–µ—Ç–µ–≤—à–∏—Ö —Ä–µ–π—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π")
            st.stop()

        # ---------- NEW sold_total & remaining ----------
        # sold_total —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –∂—ë—Å—Ç–∫–∏–µ –±–ª–æ–∫–∏: Cap - Av seats
        df['sold_total']      = (df['total_seats'] - df['av_seats']).clip(lower=0)
        # –æ—Å—Ç–∞—Ç–æ–∫ –º–µ—Å—Ç —Ä–∞–≤–µ–Ω Av seats
        df['remaining_seats'] = df['av_seats'].clip(lower=0)

        # ---------- Daily plan & diffs ----------
        df['daily_needed'] = np.where(
            (df['days_to_flight'] > 0) & (df['remaining_seats'] > 0),
            df['remaining_seats'] / df['days_to_flight'],
            0
        )
        df['diff_vs_plan'] = df['sold_yesterday'] - df['daily_needed']

        # ---------- Classification ----------
        def classify(row):
            days_to_flight = row['days_to_flight']
            daily_needed = row['daily_needed']
            diff = row['diff_vs_plan']
            load_factor = row['load_factor_num']
            sold_yesterday = row['sold_yesterday']

            if daily_needed < 3:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            if sold_yesterday == 0 and load_factor > 90:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            if days_to_flight > 30 and daily_needed < 4:
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞" if sold_yesterday > daily_needed else "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ"
            if diff > max(5, daily_needed * 0.3):
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            if abs(diff) <= max(5, daily_needed * 0.3):
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            return "üî¥ –û—Ç—Å—Ç–∞—ë–º"

        df['status'] = df.apply(classify, axis=1)

        # ---------- Result set ----------
        result_columns = [
            'flight', 'flight_date', 'flight_number', 'route',
            'total_seats', 'sold_total', 'sold_yesterday',
            'remaining_seats', 'days_to_flight', 'daily_needed',
            'diff_vs_plan', 'load_factor_num', 'status'
        ]
        result = df[result_columns].copy()

        # ---------- Formatting ----------
        result['daily_needed']     = result['daily_needed'].fillna(0).round(1)
        result['diff_vs_plan']     = result['diff_vs_plan'].fillna(0).round(1)
        result['sold_yesterday']   = result['sold_yesterday'].fillna(0).round(1)
        result['load_factor_num']  = result['load_factor_num'].fillna(0).round(1)
        result['sold_total']       = result['sold_total'].fillna(0).round(0).astype(int)
        result['remaining_seats']  = result['remaining_seats'].fillna(0).round(0).astype(int)

        # ---------- Header & status chips ----------
        col1, col2 = st.columns([3, 1])
        with col1:
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂")
        with col2:
            status_counts = result['status'].value_counts()
            st.metric("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", len(result))

        status_colors = {
            "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞": "#1f77b4",
            "üü¢ –ü–æ –ø–ª–∞–Ω—É": "#2ca02c",
            "üî¥ –û—Ç—Å—Ç–∞—ë–º": "#d62728",
            "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ": "#7f7f7f"
        }
        cols = st.columns(len(status_counts))
        for i, (status, count) in enumerate(status_counts.items()):
            color = status_colors.get(status, "#7f7f7f")
            cols[i].markdown(
                f"<div style='background-color:{color}; padding:10px; border-radius:5px; color:white; text-align:center;'>"
                f"<b>{status}</b><br>{count} —Ä–µ–π—Å–æ–≤</div>",
                unsafe_allow_html=True
            )

        # ---------- Filters ----------
        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            selected_status = st.multiselect(
                "–°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–æ–≤",
                options=result['status'].unique(),
                default=result['status'].unique()
            )
        with col2:
            min_days = int(result['days_to_flight'].min())
            max_days = int(result['days_to_flight'].max())
            days_range = st.slider("–î–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞", min_days, max_days, (min_days, max_days))
        with col3:
            routes = st.multiselect(
                "–ú–∞—Ä—à—Ä—É—Ç—ã",
                options=result['route'].unique(),
                default=result['route'].unique()
            )
        with col4:
            min_load = float(result['load_factor_num'].min())
            max_load = float(result['load_factor_num'].max())
            load_factor_range = st.slider("Load Factor (%)", min_load, max_load, (min_load, max_load))

        filtered_result = result[
            (result['status'].isin(selected_status)) &
            (result['days_to_flight'].between(days_range[0], days_range[1])) &
            (result['route'].isin(routes)) &
            (result['load_factor_num'].between(load_factor_range[0], load_factor_range[1]))
        ]

        # ---------- Table styling ----------
        def highlight_rows(row):
            if row['status'] == 'üî¥ –û—Ç—Å—Ç–∞—ë–º':
                return ['background-color: #ffcccc'] * len(row)
            if row['status'] == 'üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞':
                return ['background-color: #ccffcc'] * len(row)
            if row['status'] == '‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ':
                return ['background-color: #f0f0f0'] * len(row)
            return [''] * len(row)

        display_columns = [
            'flight', 'flight_date', 'flight_number', 'route',
            'total_seats', 'sold_total', 'sold_yesterday',
            'remaining_seats', 'days_to_flight', 'daily_needed',
            'diff_vs_plan', 'load_factor_num', 'status'
        ]
        formatted_result = filtered_result[display_columns].copy()

        display_df = formatted_result.copy()
        display_df['flight_date'] = display_df['flight_date'].dt.strftime('%Y-%m-%d')
        display_df['daily_needed'] = display_df['daily_needed'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['diff_vs_plan'] = display_df['diff_vs_plan'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['sold_yesterday'] = display_df['sold_yesterday'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['load_factor_num'] = display_df['load_factor_num'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "0.0%")
        display_df = display_df.rename(columns={'load_factor_num': 'load_factor'})

        st.dataframe(
            display_df.style.apply(highlight_rows, axis=1),
            use_container_width=True,
            height=400
        )

        # ---------- Attention block ----------
        attention_df = filtered_result[filtered_result['status'].isin(["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"])]
        if not attention_df.empty:
            st.subheader("‚ö†Ô∏è –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            if 'checked_flights' not in st.session_state:
                st.session_state.checked_flights = {}
            for status in ["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"]:
                status_df = attention_df[attention_df['status'] == status]
                if not status_df.empty:
                    with st.expander(f"{status} ({len(status_df)} —Ä–µ–π—Å–æ–≤)"):
                        st.info("‚úÖ –û—Ç–º–µ—á–∞–π—Ç–µ —Ä–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏")
                        for _, row in status_df.iterrows():
                            flight_key = row['flight']
                            if flight_key not in st.session_state.checked_flights:
                                st.session_state.checked_flights[flight_key] = False
                            c1, c2 = st.columns([1, 10])
                            with c1:
                                is_checked = st.checkbox(
                                    "",
                                    value=st.session_state.checked_flights[flight_key],
                                    key=f"check_{flight_key}",
                                    help="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —Ä–µ–π—Å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                                )
                                st.session_state.checked_flights[flight_key] = is_checked
                            with c2:
                                st.markdown(f"~~{row['flight']}~~ ‚úÖ" if is_checked else f"**{row['flight']}**")
                                st.markdown(f"""
                                - **–ú–∞—Ä—à—Ä—É—Ç:** {row['route']}
                                - **–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:** {row['flight_date'].strftime('%Y-%m-%d')}
                                - **–ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞:** {row['sold_yesterday']:.1f}
                                - **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ–º–ø:** {row['daily_needed']:.1f}
                                - **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:** {row['diff_vs_plan']:.1f}
                                - **Load Factor:** {row['load_factor'] if 'load_factor' in row else row['load_factor_num']:.1f}%
                                - **–î–Ω–µ–π –¥–æ –≤—ã–ª–µ—Ç–∞:** {row['days_to_flight']}
                                """)
                            st.markdown("---")
                        checked_count = sum(1 for key in st.session_state.checked_flights 
                                            if st.session_state.checked_flights[key] and 
                                            key in status_df['flight'].values)
                        total_count = len(status_df)
                        st.metric(
                            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–π—Å–æ–≤ ({status})", 
                            f"{checked_count} –∏–∑ {total_count}",
                            delta=f"{checked_count/total_count*100:.1f}%" if total_count > 0 else "0%"
                        )

        # ---------- Export ----------
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            result_to_export = result.copy()
            result_to_export['flight_date'] = result_to_export['flight_date'].dt.strftime('%Y-%m-%d')
            result_to_export['daily_needed'] = result_to_export['daily_needed'].fillna(0).round(1)
            result_to_export['diff_vs_plan'] = result_to_export['diff_vs_plan'].fillna(0).round(1)
            result_to_export['sold_yesterday'] = result_to_export['sold_yesterday'].fillna(0).round(1)
            result_to_export['load_factor'] = result_to_export['load_factor_num'].fillna(0).round(1)
            result_to_export = result_to_export.drop('load_factor_num', axis=1)
            result_to_export.to_excel(writer, index=False, sheet_name='Sales_Speed')

        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Excel",
            data=output.getvalue(),
            file_name=f"sales_speed_analysis_{today.strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
