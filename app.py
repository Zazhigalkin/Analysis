import streamlit as st
import pandas as pd
from datetime import datetime
import io
import numpy as np
import time

# ----------------------- REAL-TIME USER TRACKING -----------------------
def init_user_tracking():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if 'active_users' not in st.session_state:
        st.session_state.active_users = {}
    if 'user_last_activity' not in st.session_state:
        st.session_state.user_last_activity = {}

def get_user_session_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_session_id' not in st.session_state:
        st.session_state.user_session_id = f"session_{int(time.time())}_{np.random.randint(1000, 9999)}"
    return st.session_state.user_session_id

def update_user_activity():
    """–û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    init_user_tracking()
    session_id = get_user_session_id()
    current_time = time.time()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.user_last_activity[session_id] = current_time
    
    # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)
    timeout = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    active_users = {}
    for user_id, last_active in st.session_state.user_last_activity.items():
        if current_time - last_active < timeout:
            active_users[user_id] = last_active
    
    st.session_state.user_last_activity = active_users
    st.session_state.active_users_count = len(active_users)

# ----------------------- PAGE CONFIG -----------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–æ–≤ –ø—Ä–æ–¥–∞–∂", page_icon="üìà", layout="wide")

# –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
update_user_activity()

# ----------------------- HEADER WITH USER COUNT -----------------------
col1, col2, col3 = st.columns([3, 1, 1])
with col1:
    st.title("üìà –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º —Å —É—á—ë—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")
with col2:
    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = st.session_state.get('active_users_count', 1)
    st.metric(
        "üë• –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–π—á–∞—Å", 
        f"{active_users} —á–µ–ª",
        delta=None
    )
with col3:
    st.metric("üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", datetime.now().strftime('%H:%M'))

# ----------------------- HELPERS ---------------------------
def clean_number(s: pd.Series) -> pd.Series:
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–∞: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã/–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float."""
    return pd.to_numeric(
        s.astype(str)
         .str.replace('\u00a0','', regex=False)
         .str.replace(' ','', regex=False)
         .str.replace(',','.', regex=False),
        errors='coerce'
    )

def clean_percent(s: pd.Series) -> pd.Series:
    """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã: —Å–Ω–∏–º–∞–µ—Ç %, —á–∏—Å—Ç–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (0..1 -> *100)."""
    val = pd.to_numeric(
        s.astype(str)
         .str.replace('%','', regex=False)
         .str.replace('\u00a0','', regex=False)
         .str.replace(' ','', regex=False)
         .str.replace(',','.', regex=False),
        errors='coerce'
    )
    if val.mean(skipna=True) < 2:
        val = val * 100
    return val

# ----------------------- UI: INSTRUCTIONS ------------------
with st.expander("‚ÑπÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ò –õ–û–ì–ò–ö–ï –ê–ù–ê–õ–ò–ó–ê"):
    st.markdown("""
    ### üìã –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:
    - `flt_date&num` ‚Äî –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ (—Ñ–æ—Ä–º–∞—Ç: `YYYY.MM.DD - XX123 - ORG-DST`)
    - `Ind SS` ‚Äî –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ç—á—ë—Ç–µ; **–±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –±–ª–æ–∫–æ–≤**)
    - `Ind SS yesterday` ‚Äî –ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞
    - `Cap` ‚Äî –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª—ë—Ç–∞
    - `LF` ‚Äî Load Factor (–∑–∞–≥—Ä—É–∑–∫–∞)
    - `Av seats` ‚Äî –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞

    ### üéØ –õ–û–ì–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–¢–ê–¢–£–°–û–í (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    """)

# ----------------------- –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô -----------------------
with st.expander("üìÅ –§–û–†–ú–ê–¢ –ó–ê–ì–†–£–ñ–ê–ï–ú–û–ì–û EXCEL-–§–ê–ô–õ–ê"):
    st.markdown("""
    ### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç ...
    """)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º
        update_user_activity()
        
        df = pd.read_excel(uploaded_file, engine="openpyxl")
        if df.empty:
            st.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
            st.stop()

        # ---------- Rename ----------
        df = df.rename(columns={
            'flt_date&num': 'flight',
            'Ind SS': 'sold_total_raw',          
            'Ind SS yesterday': 'sold_yesterday',
            'Cap': 'total_seats',
            'LF': 'load_factor',
        })

        required_columns = ['flight','sold_total_raw','sold_yesterday','total_seats','load_factor','Av seats']
        missing_columns = [c for c in required_columns if c not in df.columns]
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            st.write("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            st.stop()

        st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())

        # ---------- Split "flight" ----------
        flight_split = df['flight'].str.split(" - ", n=2, expand=True)
        if flight_split.shape[1] < 3:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'flt_date&num'. –û–∂–∏–¥–∞–µ—Ç—Å—è: 'YYYY.MM.DD - XX123 - ROUTE'")
            st.stop()
        df[['flight_date_str','flight_number','route']] = flight_split.iloc[:, :3]

        # ---------- Dates ----------
        original_count = len(df)
        df['flight_date'] = pd.to_datetime(df['flight_date_str'], format="%Y.%m.%d", errors='coerce')
        invalid_dates = df['flight_date'].isna().sum()
        if invalid_dates > 0:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid_dates} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['flight_date'].notna()].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            st.stop()
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∏–∑ {original_count} –∑–∞–ø–∏—Å–µ–π")

        # ---------- Clean numbers (vectorized) ----------
        df['total_seats']     = clean_number(df['total_seats'])
        df['sold_total_raw']  = clean_number(df['sold_total_raw']).fillna(0)
        df['sold_yesterday']  = clean_number(df['sold_yesterday']).fillna(0)
        df['av_seats']        = clean_number(df['Av seats'])
        df['load_factor_num'] = clean_percent(df['load_factor']).fillna(0)

        # ---------- Require Av seats ----------
        if df['av_seats'].isna().any():
            missing = int(df['av_seats'].isna().sum())
            st.warning(f"‚ö†Ô∏è –£ {missing} —Å—Ç—Ä–æ–∫ –Ω–µ—Ç 'Av seats' ‚Äî –æ–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã (–Ω—É–∂–Ω–æ –¥–ª—è —É—á—ë—Ç–∞ –±–ª–æ–∫–æ–≤).")
            df = df[df['av_seats'].notna()].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –±–µ–∑ 'Av seats' –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö")
            st.stop()

        # ---------- Analysis date ----------
        today = datetime.today().date()
        df['days_to_flight'] = df['flight_date'].apply(lambda x: max((x.date() - today).days, 1))

        # –£–±–∏—Ä–∞–µ–º —É–∂–µ –≤—ã–ª–µ—Ç–µ–≤—à–∏–µ
        past_flights = df[df['flight_date'].dt.date < today]
        if not past_flights.empty:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(past_flights)} —Ä–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ª–µ—Ç–µ–ª–∏. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['flight_date'].dt.date >= today].copy()
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ª–µ—Ç–µ–≤—à–∏—Ö —Ä–µ–π—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π")
            st.stop()

        # ---------- NEW sold_total & remaining ----------
        df['sold_total']      = (df['total_seats'] - df['av_seats']).clip(lower=0)
        df['remaining_seats'] = df['av_seats'].clip(lower=0)

        # ---------- Daily plan & diffs ----------
        df['daily_needed'] = np.where(
            (df['days_to_flight'] > 0) & (df['remaining_seats'] > 0),
            df['remaining_seats'] / df['days_to_flight'],
            0
        )
        df['diff_vs_plan'] = df['sold_yesterday'] - df['daily_needed']

        # ---------- Classification (–£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê - –ë–ï–ó "–î–ê–õ–ï–ö–û –î–û –†–ï–ô–°–ê") ----------
        def classify(row):
            days_to_flight = row['days_to_flight']
            daily_needed = row['daily_needed']
            diff = row['diff_vs_plan']
            load_factor = row['load_factor_num']
            sold_yesterday = row['sold_yesterday']
            
            if daily_needed < 3 and diff > 10:
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            
            if sold_yesterday == 0 and load_factor > 90:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            
            if daily_needed < 3:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            
            if days_to_flight > 30 and daily_needed < 4:
                if sold_yesterday > daily_needed:
                    return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
                else:
                    return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            
            if diff > max(5, daily_needed * 0.3):
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            elif abs(diff) <= max(5, daily_needed * 0.3):
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            else:
                return "üî¥ –û—Ç—Å—Ç–∞—ë–º"

        df['status'] = df.apply(classify, axis=1)

        # ---------- Result set ----------
        result_columns = [
            'flight', 'flight_date', 'flight_number', 'route',
            'total_seats', 'sold_total', 'sold_yesterday',
            'remaining_seats', 'days_to_flight', 'daily_needed',
            'diff_vs_plan', 'load_factor_num', 'status'
        ]
        result = df[result_columns].copy()

        # ---------- Formatting ----------
        result['daily_needed']     = result['daily_needed'].fillna(0).round(1)
        result['diff_vs_plan']     = result['diff_vs_plan'].fillna(0).round(1)
        result['sold_yesterday']   = result['sold_yesterday'].fillna(0).round(1)
        result['load_factor_num']  = result['load_factor_num'].fillna(0).round(1)
        result['sold_total']       = result['sold_total'].fillna(0).round(0).astype(int)
        result['remaining_seats']  = result['remaining_seats'].fillna(0).round(0).astype(int)

        # ----------------------- SUMMARY HEADER -----------------------
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂")
        with col2:
            status_counts = result['status'].value_counts()
            st.metric("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", len(result))
        with col3:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            update_user_activity()
            active_users = st.session_state.get('active_users_count', 1)
            st.metric("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", active_users)

        status_colors = {
            "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞": "#1f77b4",
            "üü¢ –ü–æ –ø–ª–∞–Ω—É": "#2ca02c",
            "üî¥ –û—Ç—Å—Ç–∞—ë–º": "#d62728"
        }
        cols = st.columns(len(status_counts))
        for i, (status, count) in enumerate(status_counts.items()):
            color = status_colors.get(status, "#7f7f7f")
            cols[i].markdown(
                f"<div style='background-color:{color}; padding:10px; border-radius:5px; color:white; text-align: center;'>"
                f"<b>{status}</b><br>{count} —Ä–µ–π—Å–æ–≤</div>", 
                unsafe_allow_html=True
            )

        # ----------------------- –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô -----------------------
        # ... (—Ñ–∏–ª—å—Ç—Ä—ã, —Ç–∞–±–ª–∏—Ü–∞, –±–ª–æ–∫ –≤–Ω–∏–º–∞–Ω–∏—è, —ç–∫—Å–ø–æ—Ä—Ç) ...

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    update_user_activity()
    active_users = st.session_state.get('active_users_count', 1)
    st.sidebar.markdown("---")
    st.sidebar.metric("üë• –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–π—á–∞—Å", active_users)
