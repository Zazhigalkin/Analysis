import streamlit as st
import pandas as pd
import io
import re
from datetime import datetime

st.set_page_config(page_title="Sales Speed Analyzer", layout="wide")
st.title("üìà –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ Test sales.xlsx)", type=["xlsx"])

if uploaded_file:
    # 1Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
    df_temp = pd.read_excel(uploaded_file, engine="openpyxl", header=None)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    header_row_idx = None
    for i, row in df_temp.iterrows():
        if row.notna().sum() >= len(row)/2:
            header_row_idx = i
            break
    
    if header_row_idx is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ Excel")
    else:
        # 2Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(uploaded_file, engine="openpyxl", header=header_row_idx)
        
        # 3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        def clean_col(name):
            name = str(name).strip()
            name = name.lower()
            name = re.sub(r'[^a-z0-9]', '_', name)
            return name
        
        df.columns = [clean_col(c) for c in df.columns]

        # 4Ô∏è‚É£ –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        rename_dict = {
            'flt_date_num': 'flight',  # –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π, –Ω–æ–º–µ—Ä–æ–º —Ä–µ–π—Å–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–º
            'ind_ss_today': 'today',
            'ind_ss_yesterday': 'yesterday',
            'ind_ss_2_3_days_before': 'd_2_3',
            'ind_ss_4_6_days_before': 'd_4_6',
            'ind_ss_7_13_days_before': 'd_7_13',
            'ind_ss_last_14_days': 'd_14_plus',
            'total_seats': 'total_seats'  # –µ—Å–ª–∏ –µ—Å—Ç—å
        }

        df = df.rename(columns=rename_dict)

        required_columns = ['flight', 'today', 'yesterday', 'd_2_3', 'd_4_6', 'd_7_13', 'd_14_plus']
        if not all(col in df.columns for col in required_columns):
            st.error("‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.")
            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
        else:
            # 5Ô∏è‚É£ –†–∞–∑–±–æ—Ä flight –Ω–∞ –¥–∞—Ç—É, –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ –∏ –º–∞—Ä—à—Ä—É—Ç
            def split_flight_info(flight_str):
                try:
                    parts = flight_str.split(" - ")
                    flight_date = pd.to_datetime(parts[0], format="%Y.%m.%d", errors='coerce')  # –±–µ–∑–æ–ø–∞—Å–Ω–æ
                    flight_number = parts[1] if len(parts) > 1 else None
                    route = parts[2] if len(parts) > 2 else None
                    return pd.Series([flight_date, flight_number, route])
                except:
                    return pd.Series([pd.NaT, None, None])

            df[['flight_date', 'flight_number', 'route']] = df['flight'].apply(split_flight_info)

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –¥–∞—Ç–∞ —Ä–µ–π—Å–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            df = df[df['flight_date'].notna()]

            # 6Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ –¥–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞
            today = datetime.today().date()
            df['days_to_flight'] = (df['flight_date'].dt.date - today).dt.days
            df.loc[df['days_to_flight'] < 1, 'days_to_flight'] = 1  # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å

            # 7Ô∏è‚É£ –†–∞—Å—á—ë—Ç —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂
            def calc_sales_speed(row):
                early = row['d_14_plus'] + row['d_7_13']
                recent = row['d_4_6'] + row['d_2_3'] + row['yesterday'] + row['today']
                return 0 if early == 0 else recent / early

            df['sales_speed_ratio'] = df.apply(calc_sales_speed, axis=1)

            # 8Ô∏è‚É£ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            def classify_speed(ratio):
                if ratio > 1.2:
                    return "üü¢ –ë—ã—Å—Ç—Ä–æ"
                elif ratio < 0.8:
                    return "üî¥ –ú–µ–¥–ª–µ–Ω–Ω–æ"
                else:
                    return "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ"

            df['sales_speed_status'] = df['sales_speed_ratio'].apply(classify_speed)

            # 9Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
            def attention_flag(row):
                flags = []
                notes = []

                # —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç
                if row['today'] > max(row['d_14_plus'], 1) * 1.5:
                    flags.append('–°–µ–≥–æ–¥–Ω—è')
                    notes.append("–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∑–∫–æ –≤—ã—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                if row['yesterday'] > max(row['d_14_plus'], 1) * 1.5:
                    flags.append('–í—á–µ—Ä–∞')
                    notes.append("–í—á–µ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∑–∫–æ –≤—ã—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                if row['d_2_3'] > max(row['d_14_plus'], 1) * 1.5:
                    flags.append('2-3 –¥–Ω—è –Ω–∞–∑–∞–¥')
                    notes.append("–ü—Ä–æ–¥–∞–∂–∏ 2-3 –¥–Ω—è –Ω–∞–∑–∞–¥ —Ä–µ–∑–∫–æ –≤—ã—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")

                # —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                if row['today'] < max(row['d_14_plus'], 1) * 0.5:
                    flags.append('–°–µ–≥–æ–¥–Ω—è')
                    notes.append("–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∑–∫–æ –Ω–∏–∂–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                if row['yesterday'] < max(row['d_14_plus'], 1) * 0.5:
                    flags.append('–í—á–µ—Ä–∞')
                    notes.append("–í—á–µ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∑–∫–æ –Ω–∏–∂–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                if row['d_2_3'] < max(row['d_14_plus'], 1) * 0.5:
                    flags.append('2-3 –¥–Ω—è –Ω–∞–∑–∞–¥')
                    notes.append("–ü—Ä–æ–¥–∞–∂–∏ 2-3 –¥–Ω—è –Ω–∞–∑–∞–¥ —Ä–µ–∑–∫–æ –Ω–∏–∂–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")

                return ', '.join(flags) if flags else None, '\n'.join(notes) if notes else None

            df[['attention_flag', 'notes']] = df.apply(attention_flag, axis=1, result_type='expand')

            # üîü –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –ø—Ä–æ–¥–∞–∂
            if 'total_seats' in df.columns:
                df['avg_daily_plan'] = df['total_seats'] / df['days_to_flight']
                df['today_vs_plan'] = df['today'] - df['avg_daily_plan']
                def daily_status(row):
                    if row['today_vs_plan'] > 0:
                        return "üü¢ –û–ø–µ—Ä–µ–∂–∞–µ–º"
                    elif row['today_vs_plan'] < 0:
                        return "üî¥ –û—Ç—Å—Ç–∞–µ–º"
                    else:
                        return "üü° –í –≥—Ä–∞—Ñ–∏–∫–µ"
                df['daily_sales_comparison'] = df.apply(daily_status, axis=1)
            else:
                df['daily_sales_comparison'] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ total_seats"

            # 1Ô∏è‚É£1Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = df[['flight', 'flight_date', 'flight_number', 'route', 'days_to_flight',
                         'sales_speed_ratio', 'sales_speed_status', 'daily_sales_comparison',
                         'attention_flag', 'notes']]

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            st.dataframe(result, use_container_width=True)

            # 1Ô∏è‚É£2Ô∏è‚É£ –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
            attention_df = result[result['attention_flag'].notna()]
            if not attention_df.empty:
                st.subheader("‚ö†Ô∏è –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
                st.dataframe(attention_df[['flight', 'flight_date', 'flight_number', 'route',
                                           'attention_flag', 'notes']], use_container_width=True)

            # 1Ô∏è‚É£3Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å Excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                result.to_excel(writer, index=False, sheet_name='Sales Speed')
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ Excel",
                data=output.getvalue(),
                file_name="sales_speed_report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
