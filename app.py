import streamlit as st
import pandas as pd
import io
import re

st.set_page_config(page_title="Sales Speed Analyzer", layout="wide")
st.title("üìà –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ Test sales.xlsx)", type=["xlsx"])

if uploaded_file:
    # 1Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
    df_temp = pd.read_excel(uploaded_file, engine="openpyxl", header=None)
    
    header_row_idx = None
    for i, row in df_temp.iterrows():
        if row.notna().sum() >= len(row)/2:
            header_row_idx = i
            break
    
    if header_row_idx is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ Excel")
    else:
        # 2Ô∏è‚É£ –ß—Ç–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(uploaded_file, engine="openpyxl", header=header_row_idx)
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        def clean_col(name):
            name = str(name).strip()
            name = name.lower()
            name = re.sub(r'[^a-z0-9]', '_', name)
            return name
        
        df.columns = [clean_col(c) for c in df.columns]

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        rename_dict = {
            'flt_date_num': 'flight',
            'ind_ss_today': 'today',
            'ind_ss_yesterday': 'yesterday',
            'ind_ss_2_3_days_before': 'd_2_3',
            'ind_ss_4_6_days_before': 'd_4_6',
            'ind_ss_7_13_days_before': 'd_7_13',
            'ind_ss_last_14_days': 'd_14_plus'
        }

        df = df.rename(columns=rename_dict)

        required_columns = ['flight', 'today', 'yesterday', 'd_2_3', 'd_4_6', 'd_7_13', 'd_14_plus']
        if not all(col in df.columns for col in required_columns):
            st.error("‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫.")
            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
        else:
            # 3Ô∏è‚É£ –†–∞—Å—á—ë—Ç —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂
            def calc_sales_speed(row):
                early = row['d_14_plus'] + row['d_7_13']
                recent = row['d_4_6'] + row['d_2_3'] + row['yesterday'] + row['today']
                return 0 if early == 0 else recent / early

            df['sales_speed_ratio'] = df.apply(calc_sales_speed, axis=1)

            # 4Ô∏è‚É£ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            def classify_speed(ratio):
                if ratio > 1.2:
                    return "üü¢ –ë—ã—Å—Ç—Ä–æ"
                elif ratio < 0.8:
                    return "üî¥ –ú–µ–¥–ª–µ–Ω–Ω–æ"
                else:
                    return "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ"

            df['sales_speed_status'] = df['sales_speed_ratio'].apply(classify_speed)

            # 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ (—Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º)
            def attention_flag(row):
                flags = []
                if row['today'] > row['d_14_plus'] * 1.5:  # –°–µ–≥–æ–¥–Ω—è —Ä–µ–∑–∫–æ –±–æ–ª—å—à–µ —á–µ–º —Ä–∞–Ω—å—à–µ
                    flags.append('–°–µ–≥–æ–¥–Ω—è')
                if row['yesterday'] > row['d_14_plus'] * 1.5:
                    flags.append('–í—á–µ—Ä–∞')
                if row['d_2_3'] > row['d_14_plus'] * 1.5:
                    flags.append('2-3 –¥–Ω—è –Ω–∞–∑–∞–¥')
                return ', '.join(flags) if flags else None

            df['attention_flag'] = df.apply(attention_flag, axis=1)

            # 6Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = df[['flight', 'sales_speed_ratio', 'sales_speed_status', 'attention_flag']]

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            st.dataframe(result, use_container_width=True)

            # 7Ô∏è‚É£ –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
            attention_df = result[result['attention_flag'].notna()]
            if not attention_df.empty:
                st.subheader("‚ö†Ô∏è –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
                st.dataframe(attention_df[['flight', 'attention_flag']], use_container_width=True)

            # 8Ô∏è‚É£ –°–∫–∞—á–∞—Ç—å Excel —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                result.to_excel(writer, index=False, sheet_name='Sales Speed')
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ Excel",
                data=output.getvalue(),
                file_name="sales_speed_report.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
