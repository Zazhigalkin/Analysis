import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import io
import numpy as np

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–æ–≤ –ø—Ä–æ–¥–∞–∂", page_icon="üìà", layout="wide")

st.title("üìà –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–π—Å–∞–º —Å —É—á—ë—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã")

with st.expander("‚ÑπÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ò –õ–û–ì–ò–ö–ï –ê–ù–ê–õ–ò–ó–ê"):
    st.markdown("""
    ### üìã –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:
    - `flt_date&num` - –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ (—Ñ–æ—Ä–º–∞—Ç: "2024.01.15 - SU123 - MOSCOW-SOCHI")
    - `Ind SS` - –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤
    - `Ind SS yesterday` - –ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞
    - `Cap` - –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª—ë—Ç–∞
    - `LF` - Load Factor (–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–∞)

    ### üéØ –õ–û–ì–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–¢–ê–¢–£–°–û–í (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):

    1. **üü¢ –ü–æ –ø–ª–∞–Ω—É** - –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –õ–Æ–ë–û–ï –∏–∑ —É—Å–ª–æ–≤–∏–π:
       - `daily_needed < 3` (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω)
       - `sold_yesterday = 0` –∏ `load_factor > 90%` (—Ä–µ–π—Å –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π, –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
       - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5 –±–∏–ª–µ—Ç–æ–≤ –∏–ª–∏ ¬±30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞

    2. **‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ** - –µ—Å–ª–∏:
       - `days_to_flight > 30` –∏ `daily_needed < 4` –∏ `sold_yesterday <= daily_needed`

    3. **üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞** - –µ—Å–ª–∏:
       - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω (`diff_vs_plan > 5` –∏–ª–∏ `>30%` –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞)
       - **–ò–õ–ò** `days_to_flight > 30` –∏ `daily_needed < 4` –∏ `sold_yesterday > daily_needed`

    4. **üî¥ –û—Ç—Å—Ç–∞—ë–º** - –µ—Å–ª–∏:
       - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω

    ### üìä –†–ê–°–ß–ï–¢–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
    - **days_to_flight** = –¥–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞ (–º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å)
    - **remaining_seats** = –≤—Å–µ–≥–æ –º–µ—Å—Ç - –ø—Ä–æ–¥–∞–Ω–æ
    - **daily_needed** = remaining_seats / days_to_flight (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–Ω–µ–≤–Ω–æ–π —Ç–µ–º–ø)
    - **diff_vs_plan** = sold_yesterday - daily_needed (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞)
    """)

with st.expander("üìÅ –§–û–†–ú–ê–¢ –ó–ê–ì–†–£–ñ–ê–ï–ú–û–ì–û EXCEL-–§–ê–ô–õ–ê"):
    st.markdown("""
    ### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ:
    
    | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–º–µ—Ä |
    |------------------|----------|---------|
    | `flt_date&num` | –î–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞ | `2024.01.15 - SU123 - MOSCOW-SOCHI` |
    | `LF` | Load Factor (–∑–∞–≥—Ä—É–∑–∫–∞) | `98,7%` |
    | `Av fare` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ | `4 039` |
    | `Cap` | –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç–∞ | `227` |
    | `Av seats` | –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ | `3` |
    | `Ind SS` | –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ | `214` |
    | `Ind SS today` | –ü—Ä–æ–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è | `0` |
    | `Ind SS yesterday` | **–ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞** | `4` |
    | `Ind SS 2-3 days before` | –ü—Ä–æ–¥–∞–Ω–æ 2-3 –¥–Ω—è –Ω–∞–∑–∞–¥ | `19` |
    | `Ind SS 4-6 days before` | –ü—Ä–æ–¥–∞–Ω–æ 4-6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ | `27` |
    | `Ind SS 7-13 days before` | –ü—Ä–æ–¥–∞–Ω–æ 7-13 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ | `66` |
    | `Ind SS last 14 days` | –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π | `131` |
    | `Av fare ind` | –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ | `4 039` |
    | `Av fare ind today` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ —Å–µ–≥–æ–¥–Ω—è | `0` |
    | `Av fare ind yesterday` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ –≤—á–µ—Ä–∞ | `9 594` |
    | `Av fare ind 2-3 days before` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ 2-3 –¥–Ω—è –Ω–∞–∑–∞–¥ | `4 540` |
    | `Av fare ind 4-6 days before` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ 4-6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ | `4 529` |
    | `Av fare int 7-13 days before` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ 7-13 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ | `3 344` |
    | `Av fare ind last 14 days` | –°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∑–∞ 14 –¥–Ω–µ–π | `3 860` |

    ### üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
    - **`flt_date&num`** - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–µ–π—Å–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∞
    - **`Ind SS`** - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤  
    - **`Ind SS yesterday`** - –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –≤—á–µ—Ä–∞
    - **`Cap`** - –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç–∞
    - **`LF`** - –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Å–∞

    –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂.
    """)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ Excel —Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file, engine="openpyxl")
        
        if df.empty:
            st.error("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
            st.stop()
            
        df = df.rename(columns={
            'flt_date&num': 'flight',
            'Ind SS': 'sold_total',
            'Ind SS yesterday': 'sold_yesterday',
            'Cap': 'total_seats',
            'LF': 'load_factor'
        })

        required_columns = ['flight','sold_total','sold_yesterday','total_seats','load_factor']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            st.write("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
            st.stop()

        st.write("üìä –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df.head())

        flight_split = df['flight'].str.split(" - ", n=2, expand=True)
        
        if flight_split.shape[1] < 3:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–æ–Ω–∫–∏ 'flight'. –û–∂–∏–¥–∞–µ—Ç—Å—è: '–î–∞—Ç–∞ - –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ - –ú–∞—Ä—à—Ä—É—Ç'")
            st.stop()
            
        df[['flight_date_str','flight_number','route']] = flight_split.iloc[:, :3]
        
        original_count = len(df)
        df['flight_date'] = pd.to_datetime(df['flight_date_str'], format="%Y.%m.%d", errors='coerce')
        
        invalid_dates = df['flight_date'].isna().sum()
        if invalid_dates > 0:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {invalid_dates} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.")
            df = df[df['flight_date'].notna()].copy()
        
        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            st.stop()
            
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∏–∑ {original_count} –∑–∞–ø–∏—Å–µ–π")

        today = datetime.today().date()
        
        df['days_to_flight'] = df['flight_date'].apply(
            lambda x: max((x.date() - today).days, 1)
        )

        past_flights = df[df['flight_date'].dt.date < today]
        if not past_flights.empty:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(past_flights)} —Ä–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ª–µ—Ç–µ–ª–∏. –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã.")
            df = df[df['flight_date'].dt.date >= today].copy()

        if df.empty:
            st.error("‚ùå –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ª–µ—Ç–µ–≤—à–∏—Ö —Ä–µ–π—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π")
            st.stop()

        df['remaining_seats'] = df['total_seats'] - df['sold_total']
        
        df['daily_needed'] = np.where(
            (df['days_to_flight'] > 0) & (df['remaining_seats'] > 0),
            df['remaining_seats'] / df['days_to_flight'],
            0
        )
        
        df['sold_yesterday'] = df['sold_yesterday'].fillna(0)
        
        df['diff_vs_plan'] = df['sold_yesterday'] - df['daily_needed']

        df['load_factor_num'] = df['load_factor'].astype(str).str.replace(',', '.').str.rstrip('%').astype(float)
        df['load_factor_num'] = df['load_factor_num'].fillna(0)

        def classify(row):
            days_to_flight = row['days_to_flight']
            daily_needed = row['daily_needed']
            diff = row['diff_vs_plan']
            load_factor = row['load_factor_num']  # –£–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (98.7)
            sold_yesterday = row['sold_yesterday']
            
            if daily_needed < 3:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            
            if sold_yesterday == 0 and load_factor > 90:
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            
            if days_to_flight > 30 and daily_needed < 4:
                if sold_yesterday > daily_needed:
                    return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"  # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–ª–∏ –±–æ–ª—å—à–µ –ø–ª–∞–Ω–∞ - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞
                else:
                    return "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ"  # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ –ø–æ –ø–ª–∞–Ω—É - –¥–∞–ª–µ–∫–∏–π —Ä–µ–π—Å
            
            elif diff > max(5, daily_needed * 0.3):  # 5 –∏–ª–∏ 30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                return "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            elif abs(diff) <= max(5, daily_needed * 0.3):
                return "üü¢ –ü–æ –ø–ª–∞–Ω—É"
            else:
                return "üî¥ –û—Ç—Å—Ç–∞—ë–º"

        df['status'] = df.apply(classify, axis=1)

        result_columns = [
            'flight', 'flight_date', 'flight_number', 'route', 
            'total_seats', 'sold_total', 'sold_yesterday', 
            'remaining_seats', 'days_to_flight', 'daily_needed', 
            'diff_vs_plan', 'load_factor_num', 'status'
        ]
        
        result = df[result_columns].copy()
        
        result['daily_needed'] = result['daily_needed'].fillna(0).round(1)
        result['diff_vs_plan'] = result['diff_vs_plan'].fillna(0).round(1)
        result['sold_yesterday'] = result['sold_yesterday'].fillna(0).round(1)
        result['load_factor_num'] = result['load_factor_num'].fillna(0).round(1)
        result['sold_total'] = result['sold_total'].fillna(0)
        result['remaining_seats'] = result['remaining_seats'].fillna(0)

        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–∞ –ø—Ä–æ–¥–∞–∂")
            
        with col2:
            status_counts = result['status'].value_counts()
            st.metric("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤", len(result))

        status_colors = {
            "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞": "#1f77b4",
            "üü¢ –ü–æ –ø–ª–∞–Ω—É": "#2ca02c", 
            "üî¥ –û—Ç—Å—Ç–∞—ë–º": "#d62728",
            "‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ": "#7f7f7f"
        }
        
        cols = st.columns(len(status_counts))
        for i, (status, count) in enumerate(status_counts.items()):
            color = status_colors.get(status, "#7f7f7f")
            cols[i].markdown(
                f"<div style='background-color:{color}; padding:10px; border-radius:5px; color:white; text-align: center;'>"
                f"<b>{status}</b><br>{count} —Ä–µ–π—Å–æ–≤</div>", 
                unsafe_allow_html=True
            )

        st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            selected_status = st.multiselect(
                "–°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–æ–≤",
                options=result['status'].unique(),
                default=result['status'].unique()
            )
        
        with col2:
            min_days = int(result['days_to_flight'].min())
            max_days = int(result['days_to_flight'].max())
            days_range = st.slider(
                "–î–Ω–∏ –¥–æ –≤—ã–ª–µ—Ç–∞",
                min_days, max_days, (min_days, max_days)
            )
            
        with col3:
            routes = st.multiselect(
                "–ú–∞—Ä—à—Ä—É—Ç—ã",
                options=result['route'].unique(),
                default=result['route'].unique()
            )
            
        with col4:
            min_load_factor = float(result['load_factor_num'].min())
            max_load_factor = float(result['load_factor_num'].max())
            load_factor_range = st.slider(
                "Load Factor (%)",
                min_load_factor, max_load_factor, (min_load_factor, max_load_factor)
            )

        filtered_result = result[
            (result['status'].isin(selected_status)) &
            (result['days_to_flight'].between(days_range[0], days_range[1])) &
            (result['route'].isin(routes)) &
            (result['load_factor_num'].between(load_factor_range[0], load_factor_range[1]))
        ]

        def highlight_rows(row):
            if row['status'] == 'üî¥ –û—Ç—Å—Ç–∞—ë–º':
                return ['background-color: #ffcccc'] * len(row)
            elif row['status'] == 'üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞':
                return ['background-color: #ccffcc'] * len(row)
            elif row['status'] == '‚ö™ –î–æ —Ä–µ–π—Å–∞ –µ—â—ë –¥–∞–ª–µ–∫–æ':
                return ['background-color: #f0f0f0'] * len(row)
            else:
                return [''] * len(row)

        display_columns = [
            'flight', 'flight_date', 'flight_number', 'route', 
            'total_seats', 'sold_total', 'sold_yesterday', 
            'remaining_seats', 'days_to_flight', 'daily_needed', 
            'diff_vs_plan', 'load_factor_num', 'status'
        ]
        
        formatted_result = filtered_result[display_columns].copy()
        
        display_df = formatted_result.copy()
        display_df['flight_date'] = display_df['flight_date'].dt.strftime('%Y-%m-%d')  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        display_df['daily_needed'] = display_df['daily_needed'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['diff_vs_plan'] = display_df['diff_vs_plan'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['sold_yesterday'] = display_df['sold_yesterday'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "0.0")
        display_df['load_factor_num'] = display_df['load_factor_num'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "0.0%")
        
        display_df = display_df.rename(columns={'load_factor_num': 'load_factor'})
        
        st.dataframe(
            display_df.style.apply(highlight_rows, axis=1),
            use_container_width=True,
            height=400
        )

        attention_df = filtered_result[filtered_result['status'].isin(["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"])]
        if not attention_df.empty:
            st.subheader("‚ö†Ô∏è –†–µ–π—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            
            if 'checked_flights' not in st.session_state:
                st.session_state.checked_flights = {}
            
            for status in ["üî¥ –û—Ç—Å—Ç–∞—ë–º", "üîµ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"]:
                status_df = attention_df[attention_df['status'] == status]
                if not status_df.empty:
                    with st.expander(f"{status} ({len(status_df)} —Ä–µ–π—Å–æ–≤)"):
                        st.info("‚úÖ –û—Ç–º–µ—á–∞–π—Ç–µ —Ä–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏")
                        
                        for idx, row in status_df.iterrows():
                            flight_key = row['flight']
                            
                            if flight_key not in st.session_state.checked_flights:
                                st.session_state.checked_flights[flight_key] = False
                            
                            col1, col2 = st.columns([1, 10])
                            
                            with col1:
                                is_checked = st.checkbox(
                                    "",
                                    value=st.session_state.checked_flights[flight_key],
                                    key=f"check_{flight_key}",
                                    help="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —Ä–µ–π—Å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                                )
                                st.session_state.checked_flights[flight_key] = is_checked
                            
                            with col2:
                                if is_checked:
                                    st.markdown(f"~~{row['flight']}~~ ‚úÖ")
                                else:
                                    st.markdown(f"**{row['flight']}**")
                                
                                st.markdown(f"""
                                - **–ú–∞—Ä—à—Ä—É—Ç:** {row['route']}
                                - **–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:** {row['flight_date'].strftime('%Y-%m-%d')}
                                - **–ü—Ä–æ–¥–∞–Ω–æ –≤—á–µ—Ä–∞:** {row['sold_yesterday']:.1f} 
                                - **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ–º–ø:** {row['daily_needed']:.1f}
                                - **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:** {row['diff_vs_plan']:.1f}
                                - **Load Factor:** {row['load_factor_num']:.1f}%
                                - **–î–Ω–µ–π –¥–æ –≤—ã–ª–µ—Ç–∞:** {row['days_to_flight']}
                                """)
                            
                            st.markdown("---")
                        
                        checked_count = sum(1 for key in st.session_state.checked_flights 
                                          if st.session_state.checked_flights[key] and 
                                          key in status_df['flight'].values)
                        total_count = len(status_df)
                        
                        st.metric(
                            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–µ–π—Å–æ–≤ ({status})", 
                            f"{checked_count} –∏–∑ {total_count}",
                            delta=f"{checked_count/total_count*100:.1f}%" if total_count > 0 else "0%"
                        )

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            result_to_export = result.copy()
            result_to_export['flight_date'] = result_to_export['flight_date'].dt.strftime('%Y-%m-%d')
            result_to_export['daily_needed'] = result_to_export['daily_needed'].fillna(0).round(1)
            result_to_export['diff_vs_plan'] = result_to_export['diff_vs_plan'].fillna(0).round(1)
            result_to_export['sold_yesterday'] = result_to_export['sold_yesterday'].fillna(0).round(1)
            result_to_export['load_factor'] = result_to_export['load_factor_num'].fillna(0).round(1)
            result_to_export = result_to_export.drop('load_factor_num', axis=1)
            result_to_export.to_excel(writer, index=False, sheet_name='Sales_Speed')
            
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Excel",
            data=output.getvalue(),
            file_name=f"sales_speed_analysis_{today.strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

else:
    st.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
